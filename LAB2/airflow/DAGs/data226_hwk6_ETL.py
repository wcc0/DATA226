# -*- coding: utf-8 -*-
"""DATA226 HWK6

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1xOAhhVG4v0oX5po4UpM5sSIOKriEIP3y
"""

from airflow import DAG
from airflow.models import Variable
from airflow.decorators import task
from airflow.providers.snowflake.hooks.snowflake import SnowflakeHook

from datetime import timedelta
from datetime import datetime
import snowflake.connector
import requests

def return_snowflake_conn():

    # Initialize the SnowflakeHook
    hook = SnowflakeHook(snowflake_conn_id='snowflake_conn')

    # Execute the query and fetch results
    conn = hook.get_conn()
    return conn.cursor()


@task
def ETL():
    cur = return_snowflake_conn()
    try:
        cur.execute("BEGIN;")
        cur.execute("""
                        CREATE TABLE IF NOT EXISTS dev.raw.user_session_channel (
                            userId int not NULL, 
                            sessionId varchar(32) primary key, 
                            channel varchar(32) default 'direct'
                        );
                    """)
        cur.execute("""
                        CREATE TABLE IF NOT EXISTS dev.raw.session_timestamp (
                            sessionId varchar(32) primary key, 
                            ts timestamp
                        );
                    """)
        cur.execute("""
                        CREATE OR REPLACE STAGE dev.raw.blob_stage
                        url = 's3://s3-geospatial/readonly/'
                        file_format = (type = csv, skip_header = 1, field_optionally_enclosed_by = '"');
                    """)

        cur.execute("""
                        COPY INTO dev.raw.user_session_channel
                        FROM @dev.raw.blob_stage/user_session_channel.csv;
                    """)

        cur.execute("""
                        COPY INTO dev.raw.session_timestamp
                        FROM @dev.raw.blob_stage/session_timestamp.csv;
                    """)
        cur.execute("COMMIT;")
    except Exception as e:
        cur.execute("ROLLBACK;")
        print(e)
        raise e

with DAG(
    dag_id = 'user_session_data',
    start_date = datetime(2024,9,21),
    catchup=False,
    tags=['ETL'],
    schedule = '30 2 * * *'
) as dag:
    etl_task = ETL()
    etl_task