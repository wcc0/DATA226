# -*- coding: utf-8 -*-
"""DATA226 HWK5.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qHmqc9UNAvddpnV5Q2Cd6VIp1Pd2PL44
"""

import snowflake.connector
import requests
from datetime import timedelta
from datetime import datetime
import json

from airflow import DAG
from airflow.models import Variable
from airflow.decorators import task
from airflow.providers.snowflake.hooks.snowflake import SnowflakeHook

def return_snowflake_conn():

    # Initialize the SnowflakeHook
    hook = SnowflakeHook(snowflake_conn_id='snowflake_conn')

    # Execute the query and fetch results
    conn = hook.get_conn()
    return conn.cursor()


@task
def extract(url):
    f = requests.get(url)
    return f.json()

@task
def transform(symbol, data):
    transformed_data = []

    for date, stock_info in data["Time Series (Daily)"].items():
        transformed_data.append(
            (
                symbol,
                date,
                int(float(stock_info['1. open'])),
                int(float(stock_info['4. close'])),
                int(float(stock_info['2. high'])),
                int(float(stock_info['3. low'])),
                int(stock_info['5. volume'])
            )
        )

    return transformed_data

@task
def load(records, target_table):
    con = return_snowflake_conn()
    try:
        con.execute("BEGIN;")
        con.execute(
            f"""
            create table if not exists {target_table} (
                symbol varchar,
                date date,
                open int,
                close int,
                high int,
                low int,
                volume int,
                primary key (symbol, date)
            );
            """
        )

        # Delete existing records
        con.execute(f"DELETE FROM {target_table};")

        # Insert new records
        for r in records:
            symbol = r[0].replace("'", "''")  # Escape single quotes
            stock_date = r[1]  # Date type does not need escaping
            open = r[2]
            close = r[3]
            high = r[4]
            low = r[5]
            volume = r[6]

            sql = f"""
                INSERT INTO {target_table}
                (symbol, date, open, close, high, low, volume)
                VALUES
                ('{symbol}', '{stock_date}', {open}, {close}, {high}, {low}, {volume});
            """
            con.execute(sql)

        con.execute("COMMIT;")
    except Exception as e:
        con.execute("ROLLBACK;")
        print("Error:", e)
        raise e

with DAG(
    dag_id = 'Stocks',
    start_date = datetime(2024,9,21),
    catchup=False,
    tags=['ETL'],
    schedule = '30 2 * * *'
) as dag:
    target_table = "dev.raw.stock_prices"
    api_key = Variable.get("api_key", default_var="")
    symbol = "MSFT"
    url = f'https://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol={symbol}&apikey={api_key}'

    data = extract(url)
    lines = transform(symbol, data)
    load(lines, target_table)